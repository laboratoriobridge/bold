{"version":3,"sources":["webpack:///./src/components/mdx/MDXPageLayout.tsx","webpack:///./src/pages/components/cards/index.pt.mdx"],"names":["MDXPageLayout","children","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","width","href","isMDXComponent"],"mappings":"8FAAA,qCAQeA,IAJR,YAAqC,IAAZC,EAAY,EAAZA,SAC9B,OAAO,kBAAC,IAAD,KAAaA,K,kLCCTC,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,QACN,MAAS,CACP,SAAY,aAHhB,SAMA,qTACA,kBACE,GAAM,gBACN,MAAS,CACP,SAAY,aAHhB,iBAMA,sBACE,kBAAIC,WAAW,MAAf,iYAAsZ,iBAAGA,WAAW,KACha,KAAQ,qBAD0Y,UAAtZ,KAGA,kBAAIA,WAAW,MAAf,iPAEF,kBACE,GAAM,iBACN,MAAS,CACP,SAAY,aAHhB,kBAMA,yBACF,yBACE,sBACE,kBAAIC,MAAO,KAAX,WACA,kJAKF,sBACE,kCACA,mKAKF,sBACE,sCACA,sNAEgF,IAC9E,iBAAGC,KAAK,wBAAR,YAHF,MAMF,sBACE,oCACA,kFAC2D,iBAAGA,KAAK,yBAAR,aAD3D,oGAWNN,EAAWO,gBAAiB","file":"component---src-pages-components-cards-index-pt-mdx-cbc689f6c7392d44013e.js","sourcesContent":["import React from 'react'\n\nimport { PageLayout } from '../PageLayout'\n\nexport function MDXPageLayout({ children }) {\n  return <PageLayout>{children}</PageLayout>\n}\n\nexport default MDXPageLayout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/lj/workspace/bold/site/src/components/mdx/MDXPageLayout\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"cards\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Cards`}</h1>\n    <p>{`Cards são componentes da interface usados para agrupar informações relacionadas dentro de um container/bloco. Os cards funcionam como um contentor para algumas informações curtas e relacionadas. Os cards não possuem uma configuração de estilos para o conteúdo que é apresentado neles.`}</p>\n    <h2 {...{\n      \"id\": \"boas-praticas\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Boas práticas`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Cards geram uma leitura mais lenta do que listas e tabelas. Em listas simples verticais, o posicionamento padronizado e tamanho fixo de linhas é mais previsível e facilita a leitura. Em casos onde é mais provável que o usuário busque por um item específico dentre vários agrupamentos de informações, os cards podem prejudicar leitura. Neste caso, considere utilizar o componente de `}<a parentName=\"li\" {...{\n          \"href\": \"/components/table\"\n        }}>{`Tabela`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`Cards são uma boa escolha para dashboards que apresentam diferentes tipos de conteúdo na mesma página. Nessas situações, o card ajuda a criar uma diferenciação mais óbvia entre os itens, e ainda pode acomodar uma variedade de elementos.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tipos-de-cards\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Tipos de Cards`}</h2>\n    <table>\n  <tbody>\n    <tr>\n      <th width={160}>Leitura</th>\n      <td>\n        Utilizados para apresentar informações ao usuário. Esses cards podem conter CTA's (call-to-action) como botões e\n        links.\n      </td>\n    </tr>\n    <tr>\n      <th>Clicável</th>\n      <td>\n        Utilizados como itens de navegação, podem redirecionar o usuário para outra página. Neste tipo de card não é\n        recomendado utilizar CTA's.\n      </td>\n    </tr>\n    <tr>\n      <th>Selecionável</th>\n      <td>\n        Funcionam como um Checkbox, onde o card inteiro é um alvo de seleção. Cards de seleção funcionam bem para casos\n        onde é necessário utilizar textos maiores que a recomendação do componente de{' '}\n        <a href='/components/checkbox'>Checkbox</a>.\n      </td>\n    </tr>\n    <tr>\n      <th>Expansível</th>\n      <td>\n        Cards expansíveis utilizam o comportamento do componente <a href='/components/accordion'>Accordion</a>. O card\n        expansível pode conter CTA's internos, se o CTA possuir sua própria área de clique.\n      </td>\n    </tr>\n  </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}