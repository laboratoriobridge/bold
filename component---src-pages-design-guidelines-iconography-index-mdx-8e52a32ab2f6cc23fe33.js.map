{"version":3,"sources":["webpack:///./src/components/mdx/MDXPageLayout.tsx","webpack:///./src/pages/design-guidelines/iconography/index.mdx","webpack:///./src/components/TabLinks.tsx"],"names":["MDXPageLayout","children","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","items","title","href","parentName","isMDXComponent","TabLinks","classes","useStyles","createStyles","intl","useIntl","isActive","item","location","pathname","locale","className","tabs","map","key","component","LocaleLink","to","style","active","theme","marginTop","marginBottom","boxShadow"],"mappings":"8FAAA,qCAQeA,IAJR,YAAqC,IAAZC,EAAY,EAAZA,SAC9B,OAAO,kBAAC,IAAD,KAAaA,K,8LCETC,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,cACN,MAAS,CACP,SAAY,aAHhB,eAMA,YAAC,IAAD,CAAUC,MAAO,CAAC,CAChBC,MAAO,QACPC,KAAM,kCACL,CACDD,MAAO,UACPC,KAAM,2CACJH,QAAQ,aACZ,kOAEA,kBACE,GAAM,YACN,MAAS,CACP,SAAY,aAHhB,aAMA,qIACA,qBAAG,mBAAKI,WAAW,IACf,IAAO,wBACP,IAAO,wCAEX,kBACE,GAAM,kBACN,MAAS,CACP,SAAY,aAHhB,mBAMA,6cAIA,qBAAG,mBAAKA,WAAW,IACf,IAAO,sBACP,IAAO,2BAEX,kBACE,GAAM,iBACN,MAAS,CACP,SAAY,aAHhB,kBAMA,2IAEA,qBAAG,mBAAKA,WAAW,IACf,IAAO,yBACP,IAAO,wCAEX,kBACE,GAAM,mBACN,MAAS,CACP,SAAY,aAHhB,oBAMA,mJAEA,kBACE,GAAM,WACN,MAAS,CACP,SAAY,aAHhB,YAMA,qBAAG,mBAAKA,WAAW,IACf,IAAO,uBACP,IAAO,oBAMfP,EAAWQ,gBAAiB,G,kCCpG5B,+FAaaC,EAAW,SAACP,GAAyB,IACxCE,EAAUF,EAAVE,MACAM,EAAYC,aAAUC,GAAtBF,QAEFG,EAAOC,oBACPC,EAAW,SAACC,GAAD,MACK,oBAAbC,WACNA,SAASC,WAAaF,EAAKV,MAAQW,SAASC,WAAT,IAA0BL,EAAKM,OAASH,EAAKV,OAEnF,OACE,yBAAKc,UAAWV,EAAQW,MACtB,kBAAC,IAAD,KACGjB,EAAMkB,KAAI,SAAAN,GAAI,OACb,kBAAC,IAAD,CAASO,IAAKP,EAAKV,KAAMkB,UAAWC,IAAYC,GAAIV,EAAKV,KAAMqB,MAAOjB,EAAQM,KAAMY,OAAQb,EAASC,IAClGA,EAAKX,aAQZO,EAAe,SAACiB,GAAD,MAAmB,CACtCR,KAAM,CACJS,UAAW,sBACXC,aAAc,QAEhBf,KAAM,CACJ,UAAW,CACTgB,UAAW","file":"component---src-pages-design-guidelines-iconography-index-mdx-8e52a32ab2f6cc23fe33.js","sourcesContent":["import React from 'react'\n\nimport { PageLayout } from '../PageLayout'\n\nexport function MDXPageLayout({ children }) {\n  return <PageLayout>{children}</PageLayout>\n}\n\nexport default MDXPageLayout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/lj/workspace/bold/site/src/components/mdx/MDXPageLayout\";\nimport { TabLinks } from '../../../components/TabLinks';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"iconography\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Iconography`}</h1>\n    <TabLinks items={[{\n      title: 'Usage',\n      href: '/design-guidelines/iconography'\n    }, {\n      title: 'Library',\n      href: '/design-guidelines/iconography/library'\n    }]} mdxType=\"TabLinks\" />\n    <p>{`Icons represent objects, actions, and states, and are used to communicate a message. Each icon is designed to\nbe simple, friendly and reduced to its minimal form, expressing essential characteristics.`}</p>\n    <h2 {...{\n      \"id\": \"icon-grid\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Icon Grid`}</h2>\n    <p>{`The icon grid establishes clear rules for the consistent, but flexible, positioning of the graphic elements.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/image/icn-canvas.png\",\n        \"alt\": \"Canvas size, padding and live area\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"size-and-weight\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Size and weight`}</h2>\n    <p>{`All icons are built on a 24px square with 2px of padding. System icons use a consistent stroke width of 2px,\nincluding curves and angles. When using icons, all touch target need to be 40px or higher. Icons of the same\nsize should have the same visual weight. One icon should not look heavier or lighter than another icon of the\nsame size. Glyphs or 16px icons should always be a filled icon, this assures that the icon stays legible.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/image/icn-size.png\",\n        \"alt\": \"Button size and Glyph\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"keyline-shapes\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Keyline shapes`}</h2>\n    <p>{`By using the core shapes based on the grid, you can maintain consistent visual proportions throughout your\nicons.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/image/icn-keyline.png\",\n        \"alt\": \"Canvas size, padding and live area\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"pixel-perfection\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Pixel perfection`}</h3>\n    <p>{`To avoid distorting an icon, position icons “on pixel” by making the X and Y coordinates into integers,\nwithout decimals.`}</p>\n    <h3 {...{\n      \"id\": \"examples\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Examples`}</h3>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/image/icn-pixel.png\",\n        \"alt\": \"Icon examples\"\n      }}></img></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { TabItem, Tabs, Theme, useStyles } from 'bold-ui'\nimport { useIntl } from 'gatsby-plugin-intl'\nimport React, { CSSProperties } from 'react'\n\nimport { LocaleLink } from './LocaleLink'\n\nexport interface TabLinksProps {\n  items: Array<{\n    title: string\n    href: string\n  }>\n}\n\nexport const TabLinks = (props: TabLinksProps) => {\n  const { items } = props\n  const { classes } = useStyles(createStyles)\n\n  const intl = useIntl()\n  const isActive = (item: TabLinksProps['items'][0]) =>\n    typeof location !== 'undefined' &&\n    (location.pathname === item.href || location.pathname === `/${intl.locale}${item.href}`)\n\n  return (\n    <div className={classes.tabs}>\n      <Tabs>\n        {items.map(item => (\n          <TabItem key={item.href} component={LocaleLink} to={item.href} style={classes.item} active={isActive(item)}>\n            {item.title}\n          </TabItem>\n        ))}\n      </Tabs>\n    </div>\n  )\n}\n\nconst createStyles = (theme: Theme) => ({\n  tabs: {\n    marginTop: '-0.75rem !important',\n    marginBottom: '2rem',\n  } as CSSProperties,\n  item: {\n    'a:focus': {\n      boxShadow: 'none !important',\n    },\n  } as CSSProperties,\n})\n"],"sourceRoot":""}