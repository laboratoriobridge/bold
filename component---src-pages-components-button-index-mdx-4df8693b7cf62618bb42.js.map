{"version":3,"sources":["webpack:///./src/pages/components/button/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","width","src","isMDXComponent"],"mappings":"wPAOaA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,SACN,MAAS,CACP,SAAY,aAHhB,UAMA,gMACA,kBACE,GAAM,iBACN,MAAS,CACP,SAAY,aAHhB,kBAMA,sBACE,kBAAIC,WAAW,MAAf,6DAAkF,sBAAQA,WAAW,MAAnB,SAAlF,kFACA,kBAAIA,WAAW,MAAf,qHAA0I,sBAAQA,WAAW,MAAnB,OAA1I,OAA0L,sBAAQA,WAAW,MAAnB,UAA1L,wKACA,kBAAIA,WAAW,MAAf,qDAA0E,sBAAQA,WAAW,MAAnB,QAA1E,OAA2H,sBAAQA,WAAW,MAAnB,WAA3H,sBAA8L,sBAAQA,WAAW,MAAnB,MAA9L,0EAEF,kBACE,GAAM,eACN,MAAS,CACP,SAAY,aAHhB,gBAMA,yBACF,yBACE,sBACE,kBAAIC,MAAO,KAAX,WACA,iFAEF,sBACE,sCACA,yFAEF,sBACE,0CACA,iKAKF,sBACE,qCACA,wFAEF,sBACE,yCACA,wFAEF,sBACE,uCACA,uHAEF,sBACE,wCACA,qSAQF,kBACE,GAAM,eACN,MAAS,CACP,SAAY,aAHhB,gBAMA,YAAC,IAAD,CAAMC,IAAI,sCAAsCH,QAAQ,SACxD,kBACE,GAAM,sBACN,MAAS,CACP,SAAY,aAHhB,wBAMA,YAAC,IAAD,CAAMG,IAAI,sCAAsCH,QAAQ,SACxD,kBACE,GAAM,oBACN,MAAS,CACP,SAAY,aAHhB,qBAMA,YAAC,IAAD,CAAMG,IAAI,sCAAsCH,QAAQ,SACxD,kBACE,GAAM,oBACN,MAAS,CACP,SAAY,aAHhB,qBAMA,sFAAqE,oBAAMC,WAAW,IAClF,UAAa,iBADoD,WAArE,wDAEgF,oBAAMA,WAAW,IAC7F,UAAa,iBAD+D,WAFhF,UAKA,YAAC,IAAD,CAAME,IAAI,wCAAwCH,QAAQ,UAK9DH,EAAWO,gBAAiB","file":"component---src-pages-components-button-index-mdx-4df8693b7cf62618bb42.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/lj/workspace/bold/site/src/components/mdx/MDXPageLayout\";\nimport { Demo } from '../../../components/Demo';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"button\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Button`}</h1>\n    <p>{`Buttons express what action will occur when the user clicks it. Buttons are used to initialize an action, and some examples include actions like Add, Save, and Delete.`}</p>\n    <h2 {...{\n      \"id\": \"best-practices\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Best practices`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Do not use Buttons as navigational elements. Instead, use `}<strong parentName=\"li\">{`Links`}</strong>{` because it takes the user to a new page and is not associated with an action.`}</li>\n      <li parentName=\"ul\">{`Button labels tell users what will happen when they click the button. Use verbs that describe the action, such as `}<strong parentName=\"li\">{`Add`}</strong>{` or `}<strong parentName=\"li\">{`Delete`}</strong>{`. Use sentence-style capitalization (only the first word in a phrase and any proper nouns capitalized) and no more than three words for button labels when possible.`}</li>\n      <li parentName=\"ul\">{`For Sets of Buttons, use specific labels, such as `}<strong parentName=\"li\">{`Save`}</strong>{` or `}<strong parentName=\"li\">{`Discard`}</strong>{`, instead of using `}<strong parentName=\"li\">{`OK`}</strong>{`. This is particularly helpful when the user is confirming an action.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"button-types\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Button types`}</h2>\n    <table>\n  <tbody>\n    <tr>\n      <th width={190}>Default</th>\n      <td>When an action requires primary dominance on the page.</td>\n    </tr>\n    <tr>\n      <th>Ghost button</th>\n      <td>When an action does not require primary dominance on the page.</td>\n    </tr>\n    <tr>\n      <th>Button with icon</th>\n      <td>\n        When words are not enough, icons can be used in buttons to better communicate what the button does. Icons are\n        always paired with text.\n      </td>\n    </tr>\n    <tr>\n      <th>Icon button</th>\n      <td>Usually used associated with a dropdown menu, settings panel.</td>\n    </tr>\n    <tr>\n      <th>Disabled button</th>\n      <td>Use when the user cannot proceed until an input is collected.</td>\n    </tr>\n    <tr>\n      <th>Danger button</th>\n      <td>When an action has potentially destructive effects on the user's data (delete, remove, etc).</td>\n    </tr>\n    <tr>\n      <th>Set of buttons</th>\n      <td>\n        When an action required by the user has more than one option, always use a negative action button (secondary)\n        paired with a positive action button (primary) in that order. Negative action buttons will be on the left.\n        Positive action buttons should be on the right.\n      </td>\n    </tr>\n  </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"button-sizes\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Button sizes`}</h2>\n    <Demo src='pages/components/button/ButtonSizes' mdxType=\"Demo\" />\n    <h2 {...{\n      \"id\": \"button-kinds--skins\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Button Kinds / Skins`}</h2>\n    <Demo src='pages/components/button/ButtonSkins' mdxType=\"Demo\" />\n    <h2 {...{\n      \"id\": \"button-with-icons\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Button with icons`}</h2>\n    <Demo src='pages/components/button/ButtonIcons' mdxType=\"Demo\" />\n    <h2 {...{\n      \"id\": \"loading-indicator\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Loading indicator`}</h2>\n    <p>{`The loading indicator can be manually toggled on/off with the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`loading`}</code>{` prop or automatically by returning a promise to the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`onClick`}</code>{` prop.`}</p>\n    <Demo src='pages/components/button/ButtonLoading' mdxType=\"Demo\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}